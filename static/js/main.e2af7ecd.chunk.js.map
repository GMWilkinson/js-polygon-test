{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["startPolygon","x","y","newPolygon","App","props","state","isDown","startPointX","startPointY","fromTop","fromLeft","shapeWidth","shapeHeight","arrOfPolygonCoords","draggedLineCoords","polyObj","errMessage","handleMouseDown","bind","handleMouseMove","handleMouseUp","this","drawPolygon","event","setState","offsetX","offsetY","canvas","ReactDOM","findDOMNode","refs","ctx","getContext","moveTo","lineTo","stroke","closePath","endPointX","endPointY","a","b","lineCoords","getPointIntersections","type","clearRect","width","height","beginPath","polygon","i","length","push","newPoints","changedEdgesIndex","newPolygon1","map","item","newPolygon2","arr1","arr2","forEach","setTimeout","j","k","JSON","stringify","drawNewShapes","x0","y0","x1","y1","dx","Math","abs","dy","sx","sy","err","arr","e2","className","id","ref","onMouseDown","e","nativeEvent","onMouseMove","onMouseUp","onClick","React","Component","Boolean","window","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TAIMA,G,MAAe,CACnB,CACEC,EAAG,IACHC,EAAG,KAEL,CACED,EAAG,IACHC,EAAG,IAEL,CACED,EAAG,IACHC,EAAG,IAEL,CACED,EAAG,IACHC,EAAG,KAEL,CACED,EAAG,IACHC,EAAG,KAEL,CACED,EAAG,IACHC,EAAG,KAEL,CACED,EAAG,IACHC,EAAG,OAIDC,EAAa,CACjB,CACEF,EAAG,IACHC,EAAG,KAEL,CACED,EAAG,IACHC,EAAG,KAEL,CACED,EAAG,IACHC,EAAG,IAEL,CACED,EAAG,IACHC,EAAG,KAEL,CACED,EAAG,IACHC,EAAG,KAEL,CACED,EAAG,IACHC,EAAG,KAEL,CACED,EAAG,IACHC,EAAG,MAIcE,E,kDACrB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAQ,EACRC,YAAa,GACbC,YAAa,GACbC,QAAS,EACTC,SAAU,EACVC,WAAY,EACZC,YAAa,EACbC,mBAAoB,GACpBC,kBAAmB,GACnBC,QAAS,YACTC,WAAY,IAEd,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBAjBJ,E,gEAqBfG,KAAKC,gB,sCAGSC,GAAQ,IAAD,OACrBF,KAAKG,SAAS,CACZlB,QAAQ,EACRC,YAAagB,EAAME,QACnBjB,YAAae,EAAMG,UAClB,WACD,IAAMC,EAASC,IAASC,YAAY,EAAKC,KAAKH,QAC1C3B,EAAIuB,EAAME,QACVxB,EAAIsB,EAAMG,QACVK,EAAMJ,EAAOK,WAAW,MAC5BD,EAAIE,OAAOjC,EAAGC,GACd8B,EAAIG,OAAOlC,EAAI,EAAGC,EAAI,GACtB8B,EAAII,c,+EAQMZ,GACZF,KAAKG,SAAS,CACVlB,QAAQ,IAEZ,IAAMqB,EAASC,IAASC,YAAYR,KAAKS,KAAKH,QAC1C3B,EAAIuB,EAAME,QACVxB,EAAIsB,EAAMG,QACVK,EAAMJ,EAAOK,WAAW,MAC5BD,EAAIE,OAAOZ,KAAKhB,MAAME,YAAac,KAAKhB,MAAMG,aAC9CuB,EAAIG,OAAOlC,EAAEC,GACb8B,EAAII,SACJJ,EAAIK,YACJf,KAAKG,SAAS,CACZa,UAAWrC,EACXsC,UAAWrC,GAFb,sBAGG,uBAAAsC,EAAA,aAAAA,EAAA,+DACoClB,KAAKhB,MAAlCE,EADP,EACOA,YAAaC,EADpB,EACoBA,YACf+B,EAAI,CAAChC,EAAaC,GAClBgC,EAAI,CAACxC,EAAGC,GAHb,SAI+BoB,KAAKoB,WAAWF,EAAE,GAAIA,EAAE,GAAIC,EAAE,GAAIA,EAAE,IAJnE,OAIK1B,EAJL,OAKDO,KAAKG,SAAS,CACZV,sBACC,WACDO,KAAKqB,2BARN,mD,kCAaOC,GACVtB,KAAKG,SAAS,CACZR,WAAY,KAEd,IAAMW,EAASC,IAASC,YAAYR,KAAKS,KAAKH,QAC1CI,EAAMJ,EAAOK,WAAW,MAC5BD,EAAIa,UAAU,EAAG,EAAGjB,EAAOkB,MAAOlB,EAAOmB,QACzCf,EAAIgB,YACJ,IAAMC,EAAmB,YAATL,EAAqBzC,EAAaH,EAClDsB,KAAKG,SAAS,CACZT,QAAS4B,IAGX,IADA,IAAM9B,EAAqB,GAClBoC,EAAI,EAAGA,EAAID,EAAQE,OAAQD,IAClC,GAAU,IAANA,EAAS,CACXlB,EAAIE,OAAOe,EAAQC,GAAGjD,EAAGgD,EAAQC,GAAGhD,GACpC,IAAMsC,EAAI,CAACS,EAAQC,GAAGjD,EAAGgD,EAAQC,GAAGhD,GAC9BuC,EAAI,CAACQ,EAAQC,EAAI,GAAGjD,EAAGgD,EAAQC,EAAI,GAAGhD,GAC5CY,EAAmBsC,KAAK9B,KAAKoB,WAAWF,EAAE,GAAIA,EAAE,GAAIC,EAAE,GAAIA,EAAE,UACvD,GAAIS,IAAMD,EAAQE,OAAQ,EAAG,CAClCnB,EAAIG,OAAOc,EAAQC,GAAGjD,EAAGgD,EAAQC,GAAGhD,GACpC,IAAMsC,EAAI,CAACS,EAAQC,GAAGjD,EAAGgD,EAAQC,GAAGhD,GAC9BuC,EAAI,CAACQ,EAAQ,GAAGhD,EAAGgD,EAAQ,GAAG/C,GACpCY,EAAmBsC,KAAK9B,KAAKoB,WAAWF,EAAE,GAAIA,EAAE,GAAIC,EAAE,GAAIA,EAAE,SACvD,CACLT,EAAIG,OAAOc,EAAQC,GAAGjD,EAAGgD,EAAQC,GAAGhD,GACpC,IAAMsC,EAAI,CAACS,EAAQC,GAAGjD,EAAGgD,EAAQC,GAAGhD,GAC9BuC,EAAI,CAACQ,EAAQC,EAAI,GAAGjD,EAAGgD,EAAQC,EAAI,GAAGhD,GAC5CY,EAAmBsC,KAAK9B,KAAKoB,WAAWF,EAAE,GAAIA,EAAE,GAAIC,EAAE,GAAIA,EAAE,KAGhET,EAAIK,YACJL,EAAII,SACJd,KAAKG,SAAS,CACZX,yB,oCAIUuC,EAAWC,GAAoB,IACnCtC,EAAYM,KAAKhB,MAAjBU,QACFuC,EAA0B,YAAZvC,EAAwBb,EAAWqD,KAAI,SAAAC,GAAI,sBAASA,MAAUzD,EAAawD,KAAI,SAAAC,GAAI,sBAASA,MAC1GC,EAA0B,YAAZ1C,EAAwBb,EAAWqD,KAAI,SAAAC,GAAI,sBAASA,MAAUzD,EAAawD,KAAI,SAAAC,GAAI,sBAASA,MAChH,GAAiC,IAA7BH,EAAkBH,OAAc,CAClC,IAAMQ,EAAO,GACPC,EAAO,GACbL,EAAYM,SAAQ,SAACJ,EAAMP,GAUzB,GATIA,EAAII,EAAkB,GAAK,GAC7BK,EAAKP,KAAKK,GAERP,IAAMI,EAAkB,GAAK,GAC/BK,EAAKP,KAAK,CAACnD,EAAGoD,EAAU,GAAG,GAAInD,EAAGmD,EAAU,GAAG,KAE7CH,IAAMI,EAAkB,IAC1BK,EAAKP,KAAK,CAACnD,EAAGoD,EAAU,GAAG,GAAInD,EAAGmD,EAAU,GAAG,KAE7CH,EAAII,EAAkB,GAAI,CAC5B,KAAIC,EAAYJ,OAASG,EAAkB,GAAK,GAG9C,OAFAK,EAAKP,KAAKK,OAMhBC,EAAYG,SAAQ,SAACJ,EAAMP,GACrBA,IAAMI,EAAkB,IAC1BM,EAAKR,KAAK,CAACnD,EAAGoD,EAAU,GAAG,GAAInD,EAAGmD,EAAU,GAAG,KAE7CH,EAAII,EAAkB,IAAMJ,EAAII,EAAkB,GAAK,GACzDM,EAAKR,KAAKK,GAERP,IAAMI,EAAkB,IAC1BM,EAAKR,KAAK,CAACnD,EAAGoD,EAAU,GAAG,GAAInD,EAAGmD,EAAU,GAAG,KAEzCC,EAAkB,MAI5B,IAAM1B,EAASC,IAASC,YAAYR,KAAKS,KAAKH,QAC1CI,EAAMJ,EAAOK,WAAW,MAC5BD,EAAIa,UAAU,EAAG,EAAGjB,EAAOkB,MAAOlB,EAAOmB,QACzCf,EAAIgB,YACJ,IAAK,IAAIE,EAAI,EAAGA,EAAIS,EAAKR,OAAQD,IACrB,IAANA,EACFlB,EAAIE,OAAOyB,EAAKT,GAAGjD,EAAI,GAAI0D,EAAKT,GAAGhD,EAAI,IAEvC8B,EAAIG,OAAOwB,EAAKT,GAAGjD,EAAI,GAAI0D,EAAKT,GAAGhD,EAAI,IAG3C8B,EAAIK,YACJL,EAAII,SACJJ,EAAIgB,YACJ,IAAK,IAAIE,EAAI,EAAGA,EAAIU,EAAKT,OAAQD,IACrB,IAANA,EACFlB,EAAIE,OAAO0B,EAAKV,GAAGjD,EAAI,GAAI2D,EAAKV,GAAGhD,EAAI,IAEvC8B,EAAIG,OAAOyB,EAAKV,GAAGjD,EAAI,GAAI2D,EAAKV,GAAGhD,EAAI,IAG3C8B,EAAIK,YACJL,EAAII,SACJ0B,WACE,WACE9B,EAAIa,UAAU,EAAG,EAAGjB,EAAOkB,MAAOlB,EAAOmB,QACzCzB,KAAKC,YAAYP,IACjBG,KAAKG,MAAO,UAEhBA,KAAKG,SAAS,CACZR,WAAY,yDAEd6C,WACE,WACE,IAAMlC,EAASC,IAASC,YAAYR,KAAKS,KAAKH,QACpCA,EAAOK,WAAW,MACxBY,UAAU,EAAG,EAAGjB,EAAOkB,MAAOlB,EAAOmB,QACzCzB,KAAKC,YAAYP,IACjBG,KAAKG,MAAO,O,8CAWlB,IAPuB,IAAD,EAIlBA,KAAKhB,MAFPQ,EAFoB,EAEpBA,mBACAC,EAHoB,EAGpBA,kBAEEsC,EAAY,GACVC,EAAoB,GACjBJ,EAAI,EAAGA,EAAIpC,EAAmBqC,OAAQD,IAC7C,IAAK,IAAIa,EAAI,EAAGA,EAAIhD,EAAkBoC,OAAQY,IAC5C,IAAK,IAAIC,EAAI,EAAGA,EAAIlD,EAAmBoC,GAAGC,OAAQa,IAAK,CACnCC,KAAKC,UAAUnD,EAAkBgD,MACjCE,KAAKC,UAAUpD,EAAmBoC,GAAGc,MAErDX,EAAUD,KAAKrC,EAAkBgD,IACjCT,EAAkBF,KAAKF,IAK/B5B,KAAK6C,cAAcd,EAAWC,K,iCAGrBc,EAAIC,EAAIC,EAAIC,GAOrB,IANA,IAAIC,EAAKC,KAAKC,IAAIJ,EAAKF,GACnBO,EAAKF,KAAKC,IAAIH,EAAKF,GACnBO,EAAMR,EAAKE,EAAM,GAAK,EACtBO,EAAMR,EAAKE,EAAM,GAAK,EACtBO,EAAMN,EAAKG,EACTI,EAAM,GAELX,IAAOE,GAAQD,IAAOE,GADjB,CAEV,IAAIS,EAAK,EAAEF,EACPE,GAAML,IAAMG,GAAOH,EAAIP,GAAOQ,GAC9BI,EAAKR,IAAMM,GAAON,EAAIH,GAAOQ,GACjCE,EAAI3B,KAAK,CAACgB,EAAIC,IAEhB,OAAOU,I,+BAGC,IAAD,OACC9D,EAAeK,KAAKhB,MAApBW,WACR,OACE,0BAAMgE,UAAU,kBACd,8CACA,8DACA,6BACE,4BAAKhE,GACL,4BAAQiE,GAAG,SAASC,IAAI,SACtBrC,MAAO,IACPC,OAAQ,IACRqC,YACE,SAAAC,GACE,IAAIC,EAAcD,EAAEC,YACpB,EAAKpE,gBAAgBoE,IAEzBC,YACE,SAAAF,GACE,IAAIC,EAAcD,EAAEC,YACpB,EAAKlE,gBAAgBkE,IAEzBE,UACE,SAAAH,GACE,IAAIC,EAAcD,EAAEC,YACpB,EAAKjE,cAAciE,OAI3B,4BAAQG,QAAS,kBAAM,EAAKlE,YAAY,aAAxC,qBACA,4BAAQkE,QAAS,kBAAM,EAAKlE,YAAY,eAAxC,yB,GApQyBmE,IAAMC,WCtDnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNnE,IAASoE,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e2af7ecd.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\nconst startPolygon = [\n  {\n    x: 100,\n    y: 120\n  },\n  {\n    x: 200,\n    y: 70\n  },\n  {\n    x: 300,\n    y: 70\n  },\n  {\n    x: 400,\n    y: 220\n  },\n  {\n    x: 350,\n    y: 270\n  },\n  {\n    x: 200,\n    y: 320\n  },\n  {\n    x: 150,\n    y: 320\n  }\n]\n\nconst newPolygon = [\n  {\n    x: 100,\n    y: 120\n  },\n  {\n    x: 230,\n    y: 110\n  },\n  {\n    x: 280,\n    y: 90\n  },\n  {\n    x: 300,\n    y: 220\n  },\n  {\n    x: 350,\n    y: 270\n  },\n  {\n    x: 200,\n    y: 320\n  },\n  {\n    x: 150,\n    y: 320\n  }\n]\n\nexport default class App extends React.Component{\nconstructor(props) {\n  super(props);\n  this.state = {\n    isDown: false,\n    startPointX: '',\n    startPointY: '',\n    fromTop: 0,\n    fromLeft: 0,\n    shapeWidth: 0,\n    shapeHeight: 0,\n    arrOfPolygonCoords: [],\n    draggedLineCoords: [],\n    polyObj: 'startPoly',\n    errMessage: ''\n  }\n  this.handleMouseDown = this.handleMouseDown.bind(this);\n  this.handleMouseMove = this.handleMouseMove.bind(this);\n  this.handleMouseUp = this.handleMouseUp.bind(this);\n  }\n\n  componentDidMount() {\n    this.drawPolygon();\n  }\n\n  handleMouseDown(event) {\n    this.setState({\n      isDown: true,\n      startPointX: event.offsetX,\n      startPointY: event.offsetY\n    }, ()=>{\n      const canvas = ReactDOM.findDOMNode(this.refs.canvas);\n      var x = event.offsetX;\n      var y = event.offsetY;\n      var ctx = canvas.getContext(\"2d\");\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + 1, y + 1);\n      ctx.stroke();\n    })\n  }\n\n  handleMouseMove() {\n\n  }\n\n  handleMouseUp(event){\n    this.setState({\n        isDown: false\n    });\n    const canvas = ReactDOM.findDOMNode(this.refs.canvas);\n    var x = event.offsetX;\n    var y = event.offsetY;\n    var ctx = canvas.getContext(\"2d\");\n    ctx.moveTo(this.state.startPointX, this.state.startPointY);\n    ctx.lineTo(x,y);\n    ctx.stroke();\n    ctx.closePath();\n    this.setState({\n      endPointX: x,\n      endPointY: y\n    }, async function() {\n      const { startPointX, startPointY } = this.state;\n      const a = [startPointX, startPointY];\n      const b = [x, y];\n      const draggedLineCoords = await this.lineCoords(a[0], a[1], b[0], b[1]);\n      this.setState({\n        draggedLineCoords\n      }, function() {\n        this.getPointIntersections()\n      })\n    })\n  }\n\n  drawPolygon(type) {\n    this.setState({\n      errMessage: ''\n    })\n    const canvas = ReactDOM.findDOMNode(this.refs.canvas);\n    var ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.beginPath();\n    const polygon = type === 'newPoly' ? newPolygon : startPolygon;\n    this.setState({\n      polyObj: type\n    })\n    const arrOfPolygonCoords = [];\n    for (let i = 0; i < polygon.length; i++) {\n      if (i === 0) {\n        ctx.moveTo(polygon[i].x, polygon[i].y);\n        const a = [polygon[i].x, polygon[i].y];\n        const b = [polygon[i + 1].x, polygon[i + 1].y];\n        arrOfPolygonCoords.push(this.lineCoords(a[0], a[1], b[0], b[1]));\n      } else if (i === polygon.length -1) {\n        ctx.lineTo(polygon[i].x, polygon[i].y);\n        const a = [polygon[i].x, polygon[i].y];\n        const b = [polygon[0].x, polygon[0].y];\n        arrOfPolygonCoords.push(this.lineCoords(a[0], a[1], b[0], b[1]));\n      } else {\n        ctx.lineTo(polygon[i].x, polygon[i].y);\n        const a = [polygon[i].x, polygon[i].y];\n        const b = [polygon[i + 1].x, polygon[i + 1].y];\n        arrOfPolygonCoords.push(this.lineCoords(a[0], a[1], b[0], b[1]));\n      }\n    }\n    ctx.closePath();\n    ctx.stroke();\n    this.setState({\n      arrOfPolygonCoords\n    })\n  }\n\n  drawNewShapes(newPoints, changedEdgesIndex) {\n    const { polyObj } = this.state;\n    const newPolygon1 = polyObj === 'newPoly' ? newPolygon.map(item => ({...item})) : startPolygon.map(item => ({...item}));\n    const newPolygon2 = polyObj === 'newPoly' ? newPolygon.map(item => ({...item})) : startPolygon.map(item => ({...item}));\n    if (changedEdgesIndex.length === 2) {\n      const arr1 = [];\n      const arr2 = [];\n      newPolygon1.forEach((item, i) => {\n        if (i < changedEdgesIndex[0] + 1) {\n          arr1.push(item);\n        }\n        if (i === changedEdgesIndex[0] + 1) {\n          arr1.push({x: newPoints[0][0], y: newPoints[0][1]});\n        }\n        if (i === changedEdgesIndex[1]) {\n          arr1.push({x: newPoints[1][0], y: newPoints[1][1]});\n        }\n        if (i > changedEdgesIndex[1]) {\n          if (newPolygon1.length - changedEdgesIndex[1] > 1) {\n            arr1.push(item);\n          } else {\n            return;\n          }\n        }\n      })\n      newPolygon2.forEach((item, i) => {\n        if (i === changedEdgesIndex[0]) {\n          arr2.push({x: newPoints[0][0], y: newPoints[0][1]});\n        }\n        if (i > changedEdgesIndex[0] && i < changedEdgesIndex[1] + 1) {\n          arr2.push(item);\n        }\n        if (i === changedEdgesIndex[1]) {\n          arr2.push({x: newPoints[1][0], y: newPoints[1][1]});\n        }\n        if (i > changedEdgesIndex[1]) {\n          return;\n        }\n      })\n      const canvas = ReactDOM.findDOMNode(this.refs.canvas);\n      var ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.beginPath();\n      for (let i = 0; i < arr1.length; i++) {\n        if (i === 0) {\n          ctx.moveTo(arr1[i].x - 50, arr1[i].y - 50);\n        } else {\n          ctx.lineTo(arr1[i].x - 50, arr1[i].y - 50);\n        }\n      }\n      ctx.closePath();\n      ctx.stroke();\n      ctx.beginPath();\n      for (let i = 0; i < arr2.length; i++) {\n        if (i === 0) {\n          ctx.moveTo(arr2[i].x + 50, arr2[i].y + 50);\n        } else {\n          ctx.lineTo(arr2[i].x + 50, arr2[i].y + 50);\n        }\n      }\n      ctx.closePath();\n      ctx.stroke();\n      setTimeout(\n        function() {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          this.drawPolygon(polyObj);\n        }.bind(this), 2000);\n    } else {\n      this.setState({\n        errMessage: 'Sorry, there has been a problem, try dragging slowly'\n      })\n      setTimeout(\n        function() {\n          const canvas = ReactDOM.findDOMNode(this.refs.canvas);\n          var ctx = canvas.getContext(\"2d\");\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          this.drawPolygon(polyObj);\n        }.bind(this), 2000);\n    }\n  }\n\n  getPointIntersections() {\n    const {\n      arrOfPolygonCoords,\n      draggedLineCoords\n    } = this.state;\n    let newPoints = [];\n    const changedEdgesIndex = [];\n    for (let i = 0; i < arrOfPolygonCoords.length; i++) {\n      for (let j = 0; j < draggedLineCoords.length; j++) {\n        for (let k = 0; k < arrOfPolygonCoords[i].length; k++) {\n          const dragCoord = JSON.stringify(draggedLineCoords[j]);\n          const polyCoord = JSON.stringify(arrOfPolygonCoords[i][k]);\n          if (dragCoord === polyCoord) {\n            newPoints.push(draggedLineCoords[j]);\n            changedEdgesIndex.push(i);\n          }\n        }\n      }\n    }\n    this.drawNewShapes(newPoints, changedEdgesIndex);\n  }\n\n  lineCoords(x0, y0, x1, y1) {\n    let dx = Math.abs(x1 - x0);\n    let dy = Math.abs(y1 - y0);\n    let sx = (x0 < x1) ? 1 : -1;\n    let sy = (y0 < y1) ? 1 : -1;\n    let err = dx - dy;\n    const arr = [];\n    while(true) {\n      if ((x0 === x1) && (y0 === y1)) break;\n      var e2 = 2*err;\n      if (e2 > -dy) { err -= dy; x0  += sx; }\n      if (e2 < dx) { err += dx; y0  += sy; }\n      arr.push([x0, y0])\n    }\n    return arr;\n  }\n\n  render() {\n    const { errMessage } = this.state;\n    return (\n      <main className=\"main-container\">\n        <h1>Polygon Cutter</h1>\n        <h2>Drag a line across the polygon</h2>\n        <div>\n          <h2>{errMessage}</h2>\n          <canvas id=\"canvas\" ref=\"canvas\"\n            width={500}\n            height={400}\n            onMouseDown={\n              e => {\n                let nativeEvent = e.nativeEvent;\n                this.handleMouseDown(nativeEvent);\n              }}\n            onMouseMove={\n              e => {\n                let nativeEvent = e.nativeEvent;\n                this.handleMouseMove(nativeEvent);\n              }}\n            onMouseUp={\n              e => {\n                let nativeEvent = e.nativeEvent;\n                this.handleMouseUp(nativeEvent);\n              }}\n          ></canvas>\n        </div>\n        <button onClick={() => this.drawPolygon('newPoly')}>Different Polygon</button>\n        <button onClick={() => this.drawPolygon('startPoly')}>Original Polygon</button>\n      </main>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}